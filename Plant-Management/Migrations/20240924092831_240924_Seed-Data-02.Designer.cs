// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Plant_Management.Models;

#nullable disable

namespace Plant_Management.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20240924092831_240924_Seed-Data-02")]
    partial class _240924_SeedData02
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "8.0.0");

            modelBuilder.Entity("Plant_Management.Models.Location", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Locations");
                });

            modelBuilder.Entity("Plant_Management.Models.Plant", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("CommonName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Cultivar")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("CustomName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DateExpired")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DateUpdated")
                        .HasColumnType("TEXT");

                    b.Property<string>("Genus")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<double>("Height")
                        .HasColumnType("REAL");

                    b.Property<string>("HumidityPreference")
                        .HasColumnType("TEXT");

                    b.Property<bool?>("IsToxic")
                        .HasColumnType("INTEGER");

                    b.Property<double?>("LightLevel")
                        .HasColumnType("REAL");

                    b.Property<string>("LocationId")
                        .HasColumnType("TEXT");

                    b.Property<double?>("MaxTemperature")
                        .HasColumnType("REAL");

                    b.Property<double?>("MinTemperature")
                        .HasColumnType("REAL");

                    b.Property<double?>("MoistureLevel")
                        .HasColumnType("REAL");

                    b.Property<string>("PlantTypeId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("SoilTypeId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Species")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<double>("Width")
                        .HasColumnType("REAL");

                    b.HasKey("Id");

                    b.HasIndex("LocationId");

                    b.HasIndex("PlantTypeId");

                    b.HasIndex("SoilTypeId");

                    b.ToTable("Plants");

                    b.HasData(
                        new
                        {
                            Id = "1",
                            CommonName = "Fiddle Leaf Fig",
                            Cultivar = "Standard",
                            CustomName = "Fiddle Leaf Fig",
                            DateCreated = new DateTime(2024, 9, 24, 9, 28, 31, 103, DateTimeKind.Utc).AddTicks(6460),
                            DateExpired = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateUpdated = new DateTime(2024, 9, 24, 9, 28, 31, 103, DateTimeKind.Utc).AddTicks(6460),
                            Genus = "Ficus",
                            Height = 1.5,
                            HumidityPreference = "Medium",
                            IsToxic = true,
                            LightLevel = 75.0,
                            MaxTemperature = 25.0,
                            MinTemperature = 18.0,
                            MoistureLevel = 3.0,
                            PlantTypeId = "1",
                            SoilTypeId = "1",
                            Species = "Lyrata",
                            Width = 1.0
                        });
                });

            modelBuilder.Entity("Plant_Management.Models.PlantType", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("PlantTypes");

                    b.HasData(
                        new
                        {
                            Id = "1",
                            Name = "Succulent"
                        },
                        new
                        {
                            Id = "2",
                            Name = "Fern"
                        });
                });

            modelBuilder.Entity("Plant_Management.Models.SoilType", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("SoilTypes");

                    b.HasData(
                        new
                        {
                            Id = "1",
                            Description = "",
                            Name = "Sandy"
                        },
                        new
                        {
                            Id = "2",
                            Description = "",
                            Name = "Loamy"
                        });
                });

            modelBuilder.Entity("Plant_Management.Models.Plant", b =>
                {
                    b.HasOne("Plant_Management.Models.Location", null)
                        .WithMany("Plants")
                        .HasForeignKey("LocationId");

                    b.HasOne("Plant_Management.Models.PlantType", null)
                        .WithMany("Plants")
                        .HasForeignKey("PlantTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Plant_Management.Models.SoilType", null)
                        .WithMany("Plants")
                        .HasForeignKey("SoilTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Plant_Management.Models.Location", b =>
                {
                    b.Navigation("Plants");
                });

            modelBuilder.Entity("Plant_Management.Models.PlantType", b =>
                {
                    b.Navigation("Plants");
                });

            modelBuilder.Entity("Plant_Management.Models.SoilType", b =>
                {
                    b.Navigation("Plants");
                });
#pragma warning restore 612, 618
        }
    }
}

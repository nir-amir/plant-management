// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Plant_Management.Models;

#nullable disable

namespace Plant_Management.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20240924065819_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "8.0.0");

            modelBuilder.Entity("Plant_Management.Models.Location", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Locations");
                });

            modelBuilder.Entity("Plant_Management.Models.Plant", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("CommonName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Cultivar")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DateExpired")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DateUpdated")
                        .HasColumnType("TEXT");

                    b.Property<string>("Genus")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<double>("Height")
                        .HasColumnType("REAL");

                    b.Property<string>("HumidityPreference")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsToxic")
                        .HasColumnType("INTEGER");

                    b.Property<double>("LightLevel")
                        .HasColumnType("REAL");

                    b.Property<string>("LocationId")
                        .HasColumnType("TEXT");

                    b.Property<double>("MaxTemperature")
                        .HasColumnType("REAL");

                    b.Property<double>("MinTemperature")
                        .HasColumnType("REAL");

                    b.Property<double>("MoistureLevel")
                        .HasColumnType("REAL");

                    b.Property<string>("PlantTypeId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("SoilTypeId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Species")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<double>("Width")
                        .HasColumnType("REAL");

                    b.HasKey("Id");

                    b.HasIndex("LocationId");

                    b.HasIndex("PlantTypeId");

                    b.HasIndex("SoilTypeId");

                    b.ToTable("Plants");
                });

            modelBuilder.Entity("Plant_Management.Models.PlantType", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("PlantTypes");
                });

            modelBuilder.Entity("Plant_Management.Models.SoilType", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("SoilTypes");
                });

            modelBuilder.Entity("Plant_Management.Models.Plant", b =>
                {
                    b.HasOne("Plant_Management.Models.Location", null)
                        .WithMany("Plants")
                        .HasForeignKey("LocationId");

                    b.HasOne("Plant_Management.Models.PlantType", "PlantType")
                        .WithMany("Plants")
                        .HasForeignKey("PlantTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Plant_Management.Models.SoilType", "SoilType")
                        .WithMany("Plants")
                        .HasForeignKey("SoilTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PlantType");

                    b.Navigation("SoilType");
                });

            modelBuilder.Entity("Plant_Management.Models.Location", b =>
                {
                    b.Navigation("Plants");
                });

            modelBuilder.Entity("Plant_Management.Models.PlantType", b =>
                {
                    b.Navigation("Plants");
                });

            modelBuilder.Entity("Plant_Management.Models.SoilType", b =>
                {
                    b.Navigation("Plants");
                });
#pragma warning restore 612, 618
        }
    }
}
